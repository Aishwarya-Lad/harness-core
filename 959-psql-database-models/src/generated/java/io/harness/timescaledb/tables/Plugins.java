/*
 * Copyright 2024 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Indexes;
import io.harness.timescaledb.Keys;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.PluginsRecord;

import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Plugins extends TableImpl<PluginsRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.plugins</code>
   */
  public static final Plugins PLUGINS = new Plugins();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PluginsRecord> getRecordType() {
    return PluginsRecord.class;
  }

  /**
   * The column <code>public.plugins.id</code>.
   */
  public final TableField<PluginsRecord, String> ID =
      createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.plugins.account_identifier</code>.
   */
  public final TableField<PluginsRecord, String> ACCOUNT_IDENTIFIER =
      createField(DSL.name("account_identifier"), SQLDataType.VARCHAR(64).nullable(false), this, "");

  /**
   * The column <code>public.plugins.identifier</code>.
   */
  public final TableField<PluginsRecord, String> IDENTIFIER =
      createField(DSL.name("identifier"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.plugins.name</code>.
   */
  public final TableField<PluginsRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

  /**
   * The column <code>public.plugins.enabled</code>.
   */
  public final TableField<PluginsRecord, Boolean> ENABLED = createField(DSL.name("enabled"),
      SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

  /**
   * The column <code>public.plugins.created_at</code>.
   */
  public final TableField<PluginsRecord, Long> CREATED_AT =
      createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * The column <code>public.plugins.last_updated_at</code>.
   */
  public final TableField<PluginsRecord, Long> LAST_UPDATED_AT =
      createField(DSL.name("last_updated_at"), SQLDataType.BIGINT, this, "");

  private Plugins(Name alias, Table<PluginsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Plugins(Name alias, Table<PluginsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.plugins</code> table reference
   */
  public Plugins(String alias) {
    this(DSL.name(alias), PLUGINS);
  }

  /**
   * Create an aliased <code>public.plugins</code> table reference
   */
  public Plugins(Name alias) {
    this(alias, PLUGINS);
  }

  /**
   * Create a <code>public.plugins</code> table reference
   */
  public Plugins() {
    this(DSL.name("plugins"), null);
  }

  public <O extends Record> Plugins(Table<O> child, ForeignKey<O, PluginsRecord> key) {
    super(child, key, PLUGINS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.PLUGINS_ACCOUNT_IDENTIFIER_CREATED_AT_IDX, Indexes.PLUGINS_UNIQUE_IDX);
  }

  @Override
  public UniqueKey<PluginsRecord> getPrimaryKey() {
    return Keys.PLUGINS_PKEY;
  }

  @Override
  public List<UniqueKey<PluginsRecord>> getKeys() {
    return Arrays.<UniqueKey<PluginsRecord>>asList(Keys.PLUGINS_PKEY);
  }

  @Override
  public Plugins as(String alias) {
    return new Plugins(DSL.name(alias), this);
  }

  @Override
  public Plugins as(Name alias) {
    return new Plugins(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Plugins rename(String name) {
    return new Plugins(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Plugins rename(Name name) {
    return new Plugins(name, null);
  }

  // -------------------------------------------------------------------------
  // Row7 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row7<String, String, String, String, Boolean, Long, Long> fieldsRow() {
    return (Row7) super.fieldsRow();
  }
}
